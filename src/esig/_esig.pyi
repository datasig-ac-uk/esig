from enum import Enum
from typing import Any, Type, Sequence, Iterator


class VectorType(Enum):
    ...


class ScalarTypeMeta: ...


class LieKey: ...

class Lie: ...

class TensorKey: ...
class FreeTensor: ...

class Context:

    @property
    def width(self) -> int: ...

    @property
    def depth(self) -> int: ...

    @property
    def ctype(self) -> Type[ScalarTypeMeta]: ...

    def lie_size(self, degree: int) -> int: ...

    def tensor_size(self, degree: int) -> int: ...

    def cbh(self, lies: Sequence[Lie], vtype: VectorType) -> Lie: ...

    def compute_signature(self, data: Any, **kwargs: Any) -> FreeTensor: ...

    def to_logisnature(self, signature: FreeTensor) -> Lie: ...

    def iterate_lie_keys(self) -> Iterator[LieKey]: ...

    def iterate_tensor_keys(self) -> Iterator[TensorKey]: ...



def get_context(width: int, depth: int, coeffs: Any) -> Context: ...
